# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events. If you are looking for the old version (v2) of the API, documentation can be found [here](/apidocs/v2).   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

    OpenAPI spec version: 3.0.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TeamEventStatusAlliance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'number': 'int',
        'backup': 'TeamEventStatusAllianceBackup',
        'pick': 'int'
    }

    attribute_map = {
        'name': 'name',
        'number': 'number',
        'backup': 'backup',
        'pick': 'pick'
    }

    def __init__(self, name=None, number=None, backup=None, pick=None):
        """
        TeamEventStatusAlliance - a model defined in Swagger
        """

        self._name = None
        self._number = None
        self._backup = None
        self._pick = None

        if name is not None:
          self.name = name
        self.number = number
        if backup is not None:
          self.backup = backup
        self.pick = pick

    @property
    def name(self):
        """
        Gets the name of this TeamEventStatusAlliance.
        Alliance name, may be null.

        :return: The name of this TeamEventStatusAlliance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this TeamEventStatusAlliance.
        Alliance name, may be null.

        :param name: The name of this TeamEventStatusAlliance.
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """
        Gets the number of this TeamEventStatusAlliance.
        Alliance number.

        :return: The number of this TeamEventStatusAlliance.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this TeamEventStatusAlliance.
        Alliance number.

        :param number: The number of this TeamEventStatusAlliance.
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def backup(self):
        """
        Gets the backup of this TeamEventStatusAlliance.

        :return: The backup of this TeamEventStatusAlliance.
        :rtype: TeamEventStatusAllianceBackup
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """
        Sets the backup of this TeamEventStatusAlliance.

        :param backup: The backup of this TeamEventStatusAlliance.
        :type: TeamEventStatusAllianceBackup
        """

        self._backup = backup

    @property
    def pick(self):
        """
        Gets the pick of this TeamEventStatusAlliance.
        Order the team was picked in the alliance from 0-2, with 0 being alliance captain.

        :return: The pick of this TeamEventStatusAlliance.
        :rtype: int
        """
        return self._pick

    @pick.setter
    def pick(self, pick):
        """
        Sets the pick of this TeamEventStatusAlliance.
        Order the team was picked in the alliance from 0-2, with 0 being alliance captain.

        :param pick: The pick of this TeamEventStatusAlliance.
        :type: int
        """
        if pick is None:
            raise ValueError("Invalid value for `pick`, must not be `None`")

        self._pick = pick

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TeamEventStatusAlliance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
