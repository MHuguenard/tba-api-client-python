# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events. If you are looking for the old version (v2) of the API, documentation can be found [here](/apidocs/v2).   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

    OpenAPI spec version: 3.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TeamEventStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'qual': 'TeamEventStatusRank',
        'alliance': 'TeamEventStatusAlliance',
        'playoff': 'TeamEventStatusPlayoff',
        'alliance_status_str': 'str',
        'playoff_status_str': 'str',
        'overall_status_str': 'str'
    }

    attribute_map = {
        'qual': 'qual',
        'alliance': 'alliance',
        'playoff': 'playoff',
        'alliance_status_str': 'alliance_status_str',
        'playoff_status_str': 'playoff_status_str',
        'overall_status_str': 'overall_status_str'
    }

    def __init__(self, qual=None, alliance=None, playoff=None, alliance_status_str=None, playoff_status_str=None, overall_status_str=None):
        """
        TeamEventStatus - a model defined in Swagger
        """

        self._qual = None
        self._alliance = None
        self._playoff = None
        self._alliance_status_str = None
        self._playoff_status_str = None
        self._overall_status_str = None

        if qual is not None:
          self.qual = qual
        if alliance is not None:
          self.alliance = alliance
        if playoff is not None:
          self.playoff = playoff
        if alliance_status_str is not None:
          self.alliance_status_str = alliance_status_str
        if playoff_status_str is not None:
          self.playoff_status_str = playoff_status_str
        if overall_status_str is not None:
          self.overall_status_str = overall_status_str

    @property
    def qual(self):
        """
        Gets the qual of this TeamEventStatus.

        :return: The qual of this TeamEventStatus.
        :rtype: TeamEventStatusRank
        """
        return self._qual

    @qual.setter
    def qual(self, qual):
        """
        Sets the qual of this TeamEventStatus.

        :param qual: The qual of this TeamEventStatus.
        :type: TeamEventStatusRank
        """

        self._qual = qual

    @property
    def alliance(self):
        """
        Gets the alliance of this TeamEventStatus.

        :return: The alliance of this TeamEventStatus.
        :rtype: TeamEventStatusAlliance
        """
        return self._alliance

    @alliance.setter
    def alliance(self, alliance):
        """
        Sets the alliance of this TeamEventStatus.

        :param alliance: The alliance of this TeamEventStatus.
        :type: TeamEventStatusAlliance
        """

        self._alliance = alliance

    @property
    def playoff(self):
        """
        Gets the playoff of this TeamEventStatus.

        :return: The playoff of this TeamEventStatus.
        :rtype: TeamEventStatusPlayoff
        """
        return self._playoff

    @playoff.setter
    def playoff(self, playoff):
        """
        Sets the playoff of this TeamEventStatus.

        :param playoff: The playoff of this TeamEventStatus.
        :type: TeamEventStatusPlayoff
        """

        self._playoff = playoff

    @property
    def alliance_status_str(self):
        """
        Gets the alliance_status_str of this TeamEventStatus.
        An HTML formatted string suitable for display to the user containing the team's alliance pick status.

        :return: The alliance_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._alliance_status_str

    @alliance_status_str.setter
    def alliance_status_str(self, alliance_status_str):
        """
        Sets the alliance_status_str of this TeamEventStatus.
        An HTML formatted string suitable for display to the user containing the team's alliance pick status.

        :param alliance_status_str: The alliance_status_str of this TeamEventStatus.
        :type: str
        """

        self._alliance_status_str = alliance_status_str

    @property
    def playoff_status_str(self):
        """
        Gets the playoff_status_str of this TeamEventStatus.
        An HTML formatter string suitable for display to the user containing the team's playoff status.

        :return: The playoff_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._playoff_status_str

    @playoff_status_str.setter
    def playoff_status_str(self, playoff_status_str):
        """
        Sets the playoff_status_str of this TeamEventStatus.
        An HTML formatter string suitable for display to the user containing the team's playoff status.

        :param playoff_status_str: The playoff_status_str of this TeamEventStatus.
        :type: str
        """

        self._playoff_status_str = playoff_status_str

    @property
    def overall_status_str(self):
        """
        Gets the overall_status_str of this TeamEventStatus.
        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.

        :return: The overall_status_str of this TeamEventStatus.
        :rtype: str
        """
        return self._overall_status_str

    @overall_status_str.setter
    def overall_status_str(self, overall_status_str):
        """
        Sets the overall_status_str of this TeamEventStatus.
        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.

        :param overall_status_str: The overall_status_str of this TeamEventStatus.
        :type: str
        """

        self._overall_status_str = overall_status_str

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TeamEventStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
