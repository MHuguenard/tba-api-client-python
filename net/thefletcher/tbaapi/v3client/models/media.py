# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

    OpenAPI spec version: 3.03.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Media(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'type': 'str',
        'foreign_key': 'str',
        'details': 'object',
        'preferred': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'type': 'type',
        'foreign_key': 'foreign_key',
        'details': 'details',
        'preferred': 'preferred'
    }

    def __init__(self, key=None, type=None, foreign_key=None, details=None, preferred=None):
        """
        Media - a model defined in Swagger
        """

        self._key = None
        self._type = None
        self._foreign_key = None
        self._details = None
        self._preferred = None

        self.key = key
        self.type = type
        if foreign_key is not None:
          self.foreign_key = foreign_key
        if details is not None:
          self.details = details
        if preferred is not None:
          self.preferred = preferred

    @property
    def key(self):
        """
        Gets the key of this Media.
        TBA identifier for this media.

        :return: The key of this Media.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Media.
        TBA identifier for this media.

        :param key: The key of this Media.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def type(self):
        """
        Gets the type of this Media.
        String type of the media element.

        :return: The type of this Media.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Media.
        String type of the media element.

        :param type: The type of this Media.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        allowed_values = ["youtube", "cdphotothread", "imgur", "facebook-profile", "youtube-channel", "twitter-profile", "github-profile", "instagram-profile", "periscope-profile", "grabcad", "instagram-image", "external-link", "avatar"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def foreign_key(self):
        """
        Gets the foreign_key of this Media.
        The key used to identify this media on the media site.

        :return: The foreign_key of this Media.
        :rtype: str
        """
        return self._foreign_key

    @foreign_key.setter
    def foreign_key(self, foreign_key):
        """
        Sets the foreign_key of this Media.
        The key used to identify this media on the media site.

        :param foreign_key: The foreign_key of this Media.
        :type: str
        """

        self._foreign_key = foreign_key

    @property
    def details(self):
        """
        Gets the details of this Media.
        If required, a JSON dict of additional media information.

        :return: The details of this Media.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this Media.
        If required, a JSON dict of additional media information.

        :param details: The details of this Media.
        :type: object
        """

        self._details = details

    @property
    def preferred(self):
        """
        Gets the preferred of this Media.
        True if the media is of high quality.

        :return: The preferred of this Media.
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """
        Sets the preferred of this Media.
        True if the media is of high quality.

        :param preferred: The preferred of this Media.
        :type: bool
        """

        self._preferred = preferred

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Media):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
