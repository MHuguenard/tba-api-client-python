# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

    OpenAPI spec version: 3.02.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EventApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_district_events(self, district_key, **kwargs):
        """
        Gets a list of events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_district_events_with_http_info(district_key, **kwargs)
        else:
            (data) = self.get_district_events_with_http_info(district_key, **kwargs)
            return data

    def get_district_events_with_http_info(self, district_key, **kwargs):
        """
        Gets a list of events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events_with_http_info(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['district_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'district_key' is set
        if ('district_key' not in params) or (params['district_key'] is None):
            raise ValueError("Missing the required parameter `district_key` when calling `get_district_events`")


        collection_formats = {}

        path_params = {}
        if 'district_key' in params:
            path_params['district_key'] = params['district_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/district/{district_key}/events', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Event]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_district_events_keys(self, district_key, **kwargs):
        """
        Gets a list of event keys for events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events_keys(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_district_events_keys_with_http_info(district_key, **kwargs)
        else:
            (data) = self.get_district_events_keys_with_http_info(district_key, **kwargs)
            return data

    def get_district_events_keys_with_http_info(self, district_key, **kwargs):
        """
        Gets a list of event keys for events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events_keys_with_http_info(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['district_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'district_key' is set
        if ('district_key' not in params) or (params['district_key'] is None):
            raise ValueError("Missing the required parameter `district_key` when calling `get_district_events_keys`")


        collection_formats = {}

        path_params = {}
        if 'district_key' in params:
            path_params['district_key'] = params['district_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/district/{district_key}/events/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_district_events_simple(self, district_key, **kwargs):
        """
        Gets a short-form list of events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events_simple(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_district_events_simple_with_http_info(district_key, **kwargs)
        else:
            (data) = self.get_district_events_simple_with_http_info(district_key, **kwargs)
            return data

    def get_district_events_simple_with_http_info(self, district_key, **kwargs):
        """
        Gets a short-form list of events in the given district.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_district_events_simple_with_http_info(district_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['district_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'district_key' is set
        if ('district_key' not in params) or (params['district_key'] is None):
            raise ValueError("Missing the required parameter `district_key` when calling `get_district_events_simple`")


        collection_formats = {}

        path_params = {}
        if 'district_key' in params:
            path_params['district_key'] = params['district_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/district/{district_key}/events/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EventSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event(self, event_key, **kwargs):
        """
        Gets an Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_with_http_info(event_key, **kwargs)
            return data

    def get_event_with_http_info(self, event_key, **kwargs):
        """
        Gets an Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Event',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_alliances(self, event_key, **kwargs):
        """
        Gets a list of Elimination Alliances for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_alliances(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EliminationAlliance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_alliances_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_alliances_with_http_info(event_key, **kwargs)
            return data

    def get_event_alliances_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of Elimination Alliances for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_alliances_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EliminationAlliance]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_alliances" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_alliances`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/alliances', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EliminationAlliance]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_awards(self, event_key, **kwargs):
        """
        Gets a list of awards from the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_awards(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_awards_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_awards_with_http_info(event_key, **kwargs)
            return data

    def get_event_awards_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of awards from the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_awards_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_awards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_awards`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/awards', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Award]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_district_points(self, event_key, **kwargs):
        """
        Gets a list of team rankings for the Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_district_points(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventDistrictPoints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_district_points_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_district_points_with_http_info(event_key, **kwargs)
            return data

    def get_event_district_points_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of team rankings for the Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_district_points_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventDistrictPoints
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_district_points" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_district_points`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/district_points', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventDistrictPoints',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_insights(self, event_key, **kwargs):
        """
        Gets a set of Event-specific insights for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_insights(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_insights_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_insights_with_http_info(event_key, **kwargs)
            return data

    def get_event_insights_with_http_info(self, event_key, **kwargs):
        """
        Gets a set of Event-specific insights for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_insights_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_insights" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_insights`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/insights', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_matches(self, event_key, **kwargs):
        """
        Gets a list of matches for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_matches_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_matches_with_http_info(event_key, **kwargs)
            return data

    def get_event_matches_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of matches for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/matches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Match]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_matches_keys(self, event_key, **kwargs):
        """
        Gets a list of match keys for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches_keys(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_matches_keys_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_matches_keys_with_http_info(event_key, **kwargs)
            return data

    def get_event_matches_keys_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of match keys for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches_keys_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches_keys`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/matches/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_matches_simple(self, event_key, **kwargs):
        """
        Gets a short-form list of matches for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches_simple(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_matches_simple_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_matches_simple_with_http_info(event_key, **kwargs)
            return data

    def get_event_matches_simple_with_http_info(self, event_key, **kwargs):
        """
        Gets a short-form list of matches for the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_matches_simple_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches_simple`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/matches/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[MatchSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_op_rs(self, event_key, **kwargs):
        """
        Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_op_rs(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventOPRs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_op_rs_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_op_rs_with_http_info(event_key, **kwargs)
            return data

    def get_event_op_rs_with_http_info(self, event_key, **kwargs):
        """
        Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_op_rs_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventOPRs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_op_rs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_op_rs`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/oprs', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventOPRs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_predictions(self, event_key, **kwargs):
        """
        Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_predictions(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventPredictions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_predictions_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_predictions_with_http_info(event_key, **kwargs)
            return data

    def get_event_predictions_with_http_info(self, event_key, **kwargs):
        """
        Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_predictions_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventPredictions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_predictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_predictions`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/predictions', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventPredictions',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_rankings(self, event_key, **kwargs):
        """
        Gets a list of team rankings for the Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_rankings(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_rankings_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_rankings_with_http_info(event_key, **kwargs)
            return data

    def get_event_rankings_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of team rankings for the Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_rankings_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_rankings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_rankings`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/rankings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventRanking',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_simple(self, event_key, **kwargs):
        """
        Gets a short-form Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_simple(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_simple_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_simple_with_http_info(event_key, **kwargs)
            return data

    def get_event_simple_with_http_info(self, event_key, **kwargs):
        """
        Gets a short-form Event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_simple_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: EventSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_simple`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EventSimple',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_teams(self, event_key, **kwargs):
        """
        Gets a list of `Team` objects that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_teams_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_teams_with_http_info(event_key, **kwargs)
            return data

    def get_event_teams_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of `Team` objects that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_teams`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/teams', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Team]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_teams_keys(self, event_key, **kwargs):
        """
        Gets a list of `Team` keys that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_keys(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_teams_keys_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_teams_keys_with_http_info(event_key, **kwargs)
            return data

    def get_event_teams_keys_with_http_info(self, event_key, **kwargs):
        """
        Gets a list of `Team` keys that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_keys_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_teams_keys`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/teams/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_teams_simple(self, event_key, **kwargs):
        """
        Gets a short-form list of `Team` objects that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_simple(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_teams_simple_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_teams_simple_with_http_info(event_key, **kwargs)
            return data

    def get_event_teams_simple_with_http_info(self, event_key, **kwargs):
        """
        Gets a short-form list of `Team` objects that competed in the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_simple_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_teams_simple`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/teams/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TeamSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_event_teams_statuses(self, event_key, **kwargs):
        """
        Gets a key-value list of the event statuses for teams competing at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_statuses(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_event_teams_statuses_with_http_info(event_key, **kwargs)
        else:
            (data) = self.get_event_teams_statuses_with_http_info(event_key, **kwargs)
            return data

    def get_event_teams_statuses_with_http_info(self, event_key, **kwargs):
        """
        Gets a key-value list of the event statuses for teams competing at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_event_teams_statuses_with_http_info(event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_teams_statuses`")


        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/event/{event_key}/teams/statuses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, TeamEventStatus)',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_events_by_year(self, year, **kwargs):
        """
        Gets a list of events in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_events_by_year_with_http_info(year, **kwargs)
        else:
            (data) = self.get_events_by_year_with_http_info(year, **kwargs)
            return data

    def get_events_by_year_with_http_info(self, year, **kwargs):
        """
        Gets a list of events in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year_with_http_info(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_events_by_year`")


        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/events/{year}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Event]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_events_by_year_keys(self, year, **kwargs):
        """
        Gets a list of event keys in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year_keys(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_events_by_year_keys_with_http_info(year, **kwargs)
        else:
            (data) = self.get_events_by_year_keys_with_http_info(year, **kwargs)
            return data

    def get_events_by_year_keys_with_http_info(self, year, **kwargs):
        """
        Gets a list of event keys in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year_keys_with_http_info(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_events_by_year_keys`")


        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/events/{year}/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_events_by_year_simple(self, year, **kwargs):
        """
        Gets a short-form list of events in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year_simple(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_events_by_year_simple_with_http_info(year, **kwargs)
        else:
            (data) = self.get_events_by_year_simple_with_http_info(year, **kwargs)
            return data

    def get_events_by_year_simple_with_http_info(self, year, **kwargs):
        """
        Gets a short-form list of events in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_events_by_year_simple_with_http_info(year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_events_by_year_simple`")


        collection_formats = {}

        path_params = {}
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/events/{year}/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EventSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_event_awards(self, team_key, event_key, **kwargs):
        """
        Gets a list of awards the given team won at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_awards(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_event_awards_with_http_info(team_key, event_key, **kwargs)
        else:
            (data) = self.get_team_event_awards_with_http_info(team_key, event_key, **kwargs)
            return data

    def get_team_event_awards_with_http_info(self, team_key, event_key, **kwargs):
        """
        Gets a list of awards the given team won at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_awards_with_http_info(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_awards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_awards`")
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_awards`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/event/{event_key}/awards', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Award]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_event_matches(self, team_key, event_key, **kwargs):
        """
        Gets a list of matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)
        else:
            (data) = self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)
            return data

    def get_team_event_matches_with_http_info(self, team_key, event_key, **kwargs):
        """
        Gets a list of matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches_with_http_info(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches`")
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/event/{event_key}/matches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Match]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_event_matches_keys(self, team_key, event_key, **kwargs):
        """
        Gets a list of match keys for matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches_keys(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)
        else:
            (data) = self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)
            return data

    def get_team_event_matches_keys_with_http_info(self, team_key, event_key, **kwargs):
        """
        Gets a list of match keys for matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches_keys_with_http_info(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_keys`")
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_keys`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/event/{event_key}/matches/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_event_matches_simple(self, team_key, event_key, **kwargs):
        """
        Gets a short-form list of matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches_simple(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)
        else:
            (data) = self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)
            return data

    def get_team_event_matches_simple_with_http_info(self, team_key, event_key, **kwargs):
        """
        Gets a short-form list of matches for the given team and event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_matches_simple_with_http_info(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_simple`")
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_simple`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/event/{event_key}/matches/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Match]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_event_status(self, team_key, event_key, **kwargs):
        """
        Gets the competition rank and status of the team at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_status(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: TeamEventStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_event_status_with_http_info(team_key, event_key, **kwargs)
        else:
            (data) = self.get_team_event_status_with_http_info(team_key, event_key, **kwargs)
            return data

    def get_team_event_status_with_http_info(self, team_key, event_key, **kwargs):
        """
        Gets the competition rank and status of the team at the given event.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_event_status_with_http_info(team_key, event_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: TeamEventStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_status`")
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params) or (params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_status`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/event/{event_key}/status', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TeamEventStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events(self, team_key, **kwargs):
        """
        Gets a list of all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_with_http_info(team_key, **kwargs)
        else:
            (data) = self.get_team_events_with_http_info(team_key, **kwargs)
            return data

    def get_team_events_with_http_info(self, team_key, **kwargs):
        """
        Gets a list of all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_with_http_info(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Event]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_by_year(self, team_key, year, **kwargs):
        """
        Gets a list of events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_by_year_with_http_info(team_key, year, **kwargs)
        else:
            (data) = self.get_team_events_by_year_with_http_info(team_key, year, **kwargs)
            return data

    def get_team_events_by_year_with_http_info(self, team_key, year, **kwargs):
        """
        Gets a list of events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year_with_http_info(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year`")
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_events_by_year`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/{year}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Event]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_by_year_keys(self, team_key, year, **kwargs):
        """
        Gets a list of the event keys for events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year_keys(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_by_year_keys_with_http_info(team_key, year, **kwargs)
        else:
            (data) = self.get_team_events_by_year_keys_with_http_info(team_key, year, **kwargs)
            return data

    def get_team_events_by_year_keys_with_http_info(self, team_key, year, **kwargs):
        """
        Gets a list of the event keys for events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year_keys_with_http_info(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_keys`")
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_events_by_year_keys`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/{year}/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_by_year_simple(self, team_key, year, **kwargs):
        """
        Gets a short-form list of events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year_simple(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_by_year_simple_with_http_info(team_key, year, **kwargs)
        else:
            (data) = self.get_team_events_by_year_simple_with_http_info(team_key, year, **kwargs)
            return data

    def get_team_events_by_year_simple_with_http_info(self, team_key, year, **kwargs):
        """
        Gets a short-form list of events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_by_year_simple_with_http_info(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_simple`")
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_events_by_year_simple`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/{year}/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EventSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_keys(self, team_key, **kwargs):
        """
        Gets a list of the event keys for all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_keys(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_keys_with_http_info(team_key, **kwargs)
        else:
            (data) = self.get_team_events_keys_with_http_info(team_key, **kwargs)
            return data

    def get_team_events_keys_with_http_info(self, team_key, **kwargs):
        """
        Gets a list of the event keys for all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_keys_with_http_info(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_keys`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/keys', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_simple(self, team_key, **kwargs):
        """
        Gets a short-form list of all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_simple(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_simple_with_http_info(team_key, **kwargs)
        else:
            (data) = self.get_team_events_simple_with_http_info(team_key, **kwargs)
            return data

    def get_team_events_simple_with_http_info(self, team_key, **kwargs):
        """
        Gets a short-form list of all events this team has competed at.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_simple_with_http_info(team_key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_simple`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/simple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EventSimple]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_team_events_statuses_by_year(self, team_key, year, **kwargs):
        """
        Gets a key-value list of the event statuses for events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_statuses_by_year(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_team_events_statuses_by_year_with_http_info(team_key, year, **kwargs)
        else:
            (data) = self.get_team_events_statuses_by_year_with_http_info(team_key, year, **kwargs)
            return data

    def get_team_events_statuses_by_year_with_http_info(self, team_key, year, **kwargs):
        """
        Gets a key-value list of the event statuses for events this team has competed at in the given year.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_team_events_statuses_by_year_with_http_info(team_key, year, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param float year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_statuses_by_year" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params) or (params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_events_statuses_by_year`")
        # verify the required parameter 'year' is set
        if ('year' not in params) or (params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_events_statuses_by_year`")


        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']
        if 'year' in params:
            path_params['year'] = params['year']

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api('/team/{team_key}/events/{year}/statuses', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, TeamEventStatus)',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
